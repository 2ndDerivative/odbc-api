name: Build and test

on: [push, pull_request]

jobs:
  win64:
    name: Build & Test Win64
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install latests rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc
          default: true
          override: true

      # Extract all files from installer
      - name: Install SQLite drivers
        run: |
         Invoke-WebRequest http://www.ch-werner.de/sqliteodbc/sqliteodbc_w64.exe -OutFile C:\sqliteodbc.exe
         7z x C:\sqliteodbc.exe -o"C:\Program Files\SQLite ODBC Driver for Win64"
         REG ADD "HKLM\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers" /v "SQLite3 ODBC Driver" /t REG_SZ /d Installed /f
         REG ADD "HKLM\SOFTWARE\ODBC\ODBCINST.INI\SQLite3 ODBC Driver" /v "Driver" /t REG_SZ /d "C:\Program Files\SQLite ODBC Driver for Win64\sqlite3odbc.dll" /f
         REG ADD "HKLM\SOFTWARE\ODBC\ODBCINST.INI\SQLite3 ODBC Driver" /v "Setup" /t REG_SZ /d "C:\Program Files\SQLite ODBC Driver for Win64\sqlite3odbc.dll" /f
         REG ADD "HKLM\SOFTWARE\ODBC\ODBCINST.INI\SQLite3 ODBC Driver" /v "UsageCount" /t REG_DWORD /d 1

      # Databases need to be run independently because docker on win64 doesn't support
      # linux containers
      - name: Run Microsoft SQL Server
        uses: potatoqualitee/mssqlsuite@v1
        with:
          install: sqlengine, sqlclient
          sa-password: My@Test@Password1
          show-log: true

      - name: Setup driver expectations
        run: cp odbcsv/tests/list-drivers-windows.txt odbcsv/tests/list-drivers.txt

      # selecting a toolchain either by action or manual `rustup` calls should happen
      # before the plugin, as the cache uses the current rustc version as its cache key

      - name: Rust build cache
        uses: Swatinem/rust-cache@v2
        # with:
          # # The prefix cache key, this can be changed to start a new cache manually.
          # # default: "v0-rust"
          # prefix-key: ""

          # # A cache key that is used instead of the automatic `job`-based key,
          # # and is stable over multiple jobs.
          # # default: empty
          # shared-key: ""

          # # An additional cache key that is added alongside the automatic `job`-based
          # # cache key and can be used to further differentiate jobs.
          # # default: empty
          # key: ""

          # # A whitespace separated list of env-var *prefixes* who's value contributes
          # # to the environment cache key.
          # # The env-vars are matched by *prefix*, so the default `RUST` var will
          # # match all of `RUSTC`, `RUSTUP_*`, `RUSTFLAGS`, `RUSTDOC_*`, etc.
          # # default: "CARGO CC CFLAGS CXX CMAKE RUST"
          # env-vars: ""

          # # The cargo workspaces and target directory configuration.
          # # These entries are separated by newlines and have the form
          # # `$workspace -> $target`. The `$target` part is treated as a directory
          # # relative to the `$workspace` and defaults to "target" if not explicitly given.
          # # default: ". -> target"
          # workspaces: ""

          # # Additional non workspace directories to be cached, separated by newlines.
          # cache-directories: ""

          # # Determines whether workspace `target` directories are cached.
          # # If `false`, only the cargo registry will be cached.
          # # default: "true"
          # cache-targets: ""

          # # Determines if the cache should be saved even when the workflow has failed.
          # # default: "false"
          # cache-on-failure: ""

          # # Determines which crates are cached.
          # # If `true` all crates will be cached, otherwise only dependent crates will be cached.
          # # Useful if additional crates are used for CI tooling.
          # # default: "false"
          # cache-all-crates: ""

          # # Determiners whether the cache should be saved.
          # # If `false`, the cache is only restored.
          # # Useful for jobs where the matrix is additive e.g. additional Cargo features,
          # # or when only runs from `master` should be saved to the cache.
          # # default: "true"
          # save-if: ""
          # # To only cache runs from `master`:
          # save-if: ${{ github.ref == 'refs/heads/master' }}

          # # Specifies what to use as the backend providing cache
          # # Can be set to either "github" or "buildjet"
          # # default: "github"
          # cache-provider: ""

      - name: Test
        run: |
          cargo test --release -- --skip postgresql --skip maria_db
          cargo test --features narrow --release -- --skip postgresql --skip maria_db

  win32:
    name: Build Win32
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install latests rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: i686-pc-windows-msvc
          default: true
          override: true

      - name: Build
        run: cargo build --release

  osx:
    name: Build OS-X
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install latests rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          override: true

      - name: Build
        run: cargo build --release

  linux:
    name: Build & Test Linux
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build test container
        run: docker-compose --file docker-compose-ci.yml build test_linux

      - name: Test
        run: docker-compose --file docker-compose-ci.yml run test_linux

  odbc_3_5:
    name: Check build with ODBC 3.5
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        run: |
          cd ..
          cargo new test-compilation
          cd test-compilation
          cargo add odbc-api --path ../odbc-api/odbc-api --no-default-features --features odbc_version_3_5
          cargo build 
